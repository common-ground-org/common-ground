{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/CommonGroundManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./Project.sol\";\r\n\r\ncontract CommonGroundManager is Ownable {\r\n\t// Structs\r\n\r\n\tenum ApplicationStatus {\r\n\t\tPENDING,\r\n\t\tAPPROVED,\r\n\t\tDECLINED\r\n\t}\r\n\r\n\tstruct MilestoneApplication {\r\n\t\taddress project;\r\n\t\tuint256 stage;\r\n\t\tApplicationStatus status;\r\n\t}\r\n\r\n\tstruct ProjectSummary {\r\n\t\taddress project;\r\n\t\tstring description;\r\n\t\tstring status;\r\n\t}\r\n\r\n\t// State\r\n\r\n\tmapping(uint256 => address) private _projects;\r\n\tmapping(address => uint256) private _project_ids;\r\n\tuint256 private _total_projects;\r\n\r\n\tmapping(uint256 => address) private _evaluators;\r\n\tmapping(address => uint256) private _evaluator_ids;\r\n\tuint256 private _total_evaluators;\r\n\r\n\tmapping(uint256 => MilestoneApplication) private _milestone_applications;\r\n\tmapping(address => uint256) private _project_applications;\r\n\tuint256 private _total_milestone_applications;\r\n\r\n\t// Constructor\r\n\r\n\tconstructor() Ownable(msg.sender) {}\r\n\r\n\t// Functions\r\n\r\n\tfunction createProject(\r\n\t\tstring memory governanceRights,\r\n\t\tstring memory usageRights,\r\n\t\tstring memory projectDescription,\r\n\t\tstring memory projectName,\r\n\t\tuint256 targetFundingAmount,\r\n\t\tuint256 minContributeAmount,\r\n\t\taddress token,\r\n\t\tuint256 fundingDDL,\r\n\t\tstring[] memory milestoneDescriptions,\r\n\t\tuint256[] memory fundingAmounts,\r\n\t\tuint256[] memory deadlines\r\n\t) public returns (address) {\r\n\t\t_total_projects++;\r\n\t\taddress project = address(\r\n\t\t\tnew Project(\r\n\t\t\t\taddress(this),\r\n\t\t\t\tgovernanceRights,\r\n\t\t\t\tusageRights,\r\n\t\t\t\tprojectDescription,\r\n\t\t\t\tprojectName,\r\n\t\t\t\ttargetFundingAmount,\r\n\t\t\t\tminContributeAmount,\r\n\t\t\t\ttoken,\r\n\t\t\t\tfundingDDL,\r\n\t\t\t\tmilestoneDescriptions,\r\n\t\t\t\tfundingAmounts,\r\n\t\t\t\tdeadlines\r\n\t\t\t)\r\n\t\t);\r\n\t\t_projects[_total_projects] = project;\r\n\t\t_project_ids[project] = _total_projects;\r\n\t\treturn project;\r\n\t}\r\n\r\n\tfunction createMilestoneApplication(address project, uint256 stage) public {\r\n\t\trequire(_project_ids[project] > 0, \"Project does not exist\");\r\n\t\t_total_milestone_applications++;\r\n\t\t_milestone_applications[\r\n\t\t\t_total_milestone_applications\r\n\t\t] = MilestoneApplication(project, stage, ApplicationStatus.PENDING);\r\n\t\t_project_applications[project] = _total_milestone_applications;\r\n\t}\r\n\r\n\tfunction getMilestoneApplication(\r\n\t\taddress project\r\n\t) public view returns (MilestoneApplication memory) {\r\n\t\trequire(\r\n\t\t\t_project_applications[project] > 0,\r\n\t\t\t\"Project does not have a milestone application\"\r\n\t\t);\r\n\t\treturn _milestone_applications[_project_applications[project]];\r\n\t}\r\n\r\n\tfunction getProjectAddresses() public view returns (address[] memory) {\r\n\t\taddress[] memory addresses = new address[](_total_projects);\r\n\t\tfor (uint256 i = 1; i <= _total_projects; i++) {\r\n\t\t\taddresses[i - 1] = _projects[i];\r\n\t\t}\r\n\t\treturn addresses;\r\n\t}\r\n\r\n\tfunction CommonGroundInfo() public view returns (uint256, uint256) {\r\n\t\treturn (_total_projects, _total_evaluators);\r\n\t}\r\n\r\n\tfunction addEvaluator(address evaluator) public onlyOwner {\r\n\t\t_total_evaluators++;\r\n\t\t_evaluators[_total_evaluators] = evaluator;\r\n\t\t_evaluator_ids[evaluator] = _total_evaluators;\r\n\t}\r\n\r\n\tfunction isEvaluator(address evaluator) public view returns (bool) {\r\n\t\treturn _evaluator_ids[evaluator] > 0;\r\n\t}\r\n}\r\n"
    },
    "contracts/Project.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./CommonGroundManager.sol\";\r\n\r\ncontract Project is Ownable {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// Structs\r\n\r\n\tstruct Milestone {\r\n\t\tuint256 id;\r\n\t\tstring description;\r\n\t\tuint256 releasePercentage;\r\n\t\tuint256 deadline;\r\n\t\tMilestoneStatus status;\r\n\t\tstring proofUrl;\r\n\t}\r\n\r\n    // PENDING is the default status.\r\n    // When the owner apply to evaluate, the status is set to EVALUATING.\r\n    // If the application is approved, the status is set to COMPLETED.\r\n    // If the application is declined, the status is set back to PENDING.\r\n\tenum MilestoneStatus {\r\n\t\tPENDING,\r\n\t\tEVALUATING,\r\n\t\tCOMPLETED\r\n\t}\r\n\r\n\t// PENDING is the default status.\r\n\t// When the project is created, it is FUNDING.\r\n\t// When the total funding amount is reached, the project status is set to ACTIVE.\r\n\t// When all milestones are completed, the project status is set to COMPLETED.\r\n\t// Evaluators can cancel the project, setting the status to CANCELLED.\r\n\tenum ProjectStatus {\r\n\t\tPENDING,\r\n\t\tFUNDING,\r\n\t\tACTIVE,\r\n\t\tCOMPLETED,\r\n\t\tCANCELLED\r\n\t}\r\n\r\n\t// Modifiers\r\n\r\n\tmodifier onlyEvaluator() {\r\n\t\trequire(\r\n\t\t\t_MANAGER_CONTRACT_ADDRESS.isEvaluator(msg.sender),\r\n\t\t\t\"Only evaluators can call this function\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyMilestoneStatus(MilestoneStatus status) {\r\n\t\trequire(_status == ProjectStatus.ACTIVE, \"Project is not active\");\r\n\t\trequire(\r\n\t\t\t_current_milestone_index < _MILESTONES.length,\r\n\t\t\t\"No more milestones to evaluate\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_MILESTONES[_current_milestone_index].status == status,\r\n\t\t\t\"Milestone is not in the correct status\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyProjectStatus(ProjectStatus status) {\r\n\t\trequire(_status == status, \"Project is not in the correct status\");\r\n\t\t_;\r\n\t}\r\n\r\n\t// Project information\r\n\r\n\tstring private _GOVERNANCE_RIGHTS;\r\n\tstring private _USAGE_RIGHTS;\r\n\tstring private _PROJECT_DESCRIPTION;\r\n\tstring private _PROJECT_NAME;\r\n    uint256 private immutable _FUNDING_DDL;\r\n\tMilestone[] private _MILESTONES;\r\n\tuint256 private immutable _TARGET_FUNDING_AMOUNT;\r\n\tuint256 private immutable _MIN_CONTRIBUTE_AMOUNT;\r\n\t// IERC20 private immutable _TOKEN;\r\n\taddress private immutable _TOKEN_ADDRESS;\r\n\tCommonGroundManager private immutable _MANAGER_CONTRACT_ADDRESS;\r\n\r\n\t// State\r\n\r\n\tmapping(address => uint256) private _funding_amounts;\r\n\tuint256 private _current_funding_amount;\r\n\tProjectStatus private _status;\r\n\tuint256 private _current_milestone_index;\r\n\r\n\t// Constructor\r\n\r\n\tconstructor(\r\n\t\taddress managerContractAddress,\r\n\t\tstring memory governanceRights,\r\n\t\tstring memory usageRights,\r\n\t\tstring memory projectDescription,\r\n\t\tstring memory projectName,\r\n\t\tuint256 targetFundingAmount,\r\n\t\tuint256 minContributeAmount,\r\n\t\taddress token,\r\n        uint256 fundingDDL,\r\n\t\tstring[] memory milestoneDescriptions,\r\n\t\tuint256[] memory releasePercentages,\r\n\t\tuint256[] memory deadlines\r\n\t) Ownable(msg.sender) {\r\n\t\trequire(\r\n\t\t\tmilestoneDescriptions.length == releasePercentages.length &&\r\n\t\t\t\treleasePercentages.length == deadlines.length,\r\n\t\t\t\"Milestone arrays must have equal length\"\r\n\t\t);\r\n\r\n\t\t// Check percentage sum\r\n\t\tuint256 releasePercentageSum = 0;\r\n\t\tfor (uint256 i = 0; i < releasePercentages.length; i++) {\r\n\t\t\treleasePercentageSum += releasePercentages[i];\r\n\t\t}\r\n\t\trequire(\r\n\t\t\treleasePercentageSum == 100,\r\n\t\t\t\"Release percentages must sum to 100\"\r\n\t\t);\r\n\r\n\t\t_GOVERNANCE_RIGHTS = governanceRights;\r\n\t\t_USAGE_RIGHTS = usageRights;\r\n\t\t_PROJECT_DESCRIPTION = projectDescription;\r\n\t\t_PROJECT_NAME = projectName;\r\n\t\t_TARGET_FUNDING_AMOUNT = targetFundingAmount;\r\n\t\t_MIN_CONTRIBUTE_AMOUNT = minContributeAmount;\r\n        _FUNDING_DDL = fundingDDL;\r\n\t\t// _TOKEN = IERC20(token);\r\n\t\t_TOKEN_ADDRESS = token;\r\n\t\t_MANAGER_CONTRACT_ADDRESS = CommonGroundManager(managerContractAddress);\r\n\r\n\t\t// Initialize milestones with user provided values\r\n\t\tfor (uint256 i = 0; i < milestoneDescriptions.length; i++) {\r\n\t\t\t_MILESTONES.push(\r\n\t\t\t\tMilestone({\r\n\t\t\t\t\tid: i,\r\n\t\t\t\t\tdescription: milestoneDescriptions[i],\r\n\t\t\t\t\treleasePercentage: releasePercentages[i],\r\n\t\t\t\t\tdeadline: deadlines[i],\r\n\t\t\t\t\tstatus: MilestoneStatus.PENDING,\r\n\t\t\t\t\tproofUrl: \"\"\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\t_current_milestone_index = 0;\r\n\t\t_status = ProjectStatus.FUNDING;\r\n\t}\r\n\r\n\t// Functions\r\n\r\n\tfunction projectInfo()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tstring memory governanceRights,\r\n\t\t\tstring memory usageRights,\r\n\t\t\tstring memory projectDescription,\r\n\t\t\tstring memory projectName,\r\n\t\t\tuint256 targetFundingAmount,\r\n\t\t\tuint256 minContributeAmount,\r\n\t\t\tuint256 currentFundingAmount,\r\n\t\t\tstring memory status,\r\n\t\t\tuint256 currentMilestoneIndex,\r\n\t\t\tstring memory currentMilestoneStatus\r\n\t\t)\r\n\t{\r\n\t\treturn (\r\n\t\t\t_GOVERNANCE_RIGHTS,\r\n\t\t\t_USAGE_RIGHTS,\r\n\t\t\t_PROJECT_DESCRIPTION,\r\n\t\t\t_PROJECT_NAME,\r\n\t\t\t_TARGET_FUNDING_AMOUNT,\r\n\t\t\t_MIN_CONTRIBUTE_AMOUNT,\r\n\t\t\t_current_funding_amount,\r\n\t\t\tshowProjectStatus(_status),\r\n\t\t\t_current_milestone_index,\r\n\t\t\tshowMilestoneStatus(_MILESTONES[_current_milestone_index].status)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction contribute(\r\n\t\tuint256 amount\r\n\t) public onlyProjectStatus(ProjectStatus.FUNDING) payable {\r\n\t\trequire(\r\n\t\t\tamount > _MIN_CONTRIBUTE_AMOUNT,\r\n\t\t\t\"Amount must be greater than minimum contribute amount\"\r\n\t\t);\r\n\r\n\t\trequire(msg.value == amount, \"Amount must be equal to the contribution\");\r\n\r\n\t\ttransferTokensToThisFrom(msg.sender, amount);\r\n\r\n\t\t_funding_amounts[msg.sender] += amount;\r\n\t\t_current_funding_amount += amount;\r\n\r\n\t\tif (_current_funding_amount >= _TARGET_FUNDING_AMOUNT) {\r\n\t\t\t_status = ProjectStatus.ACTIVE;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction applyForMilestone(\r\n        string memory proofUrl\r\n    )\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\tonlyProjectStatus(ProjectStatus.ACTIVE)\r\n\t{\r\n\t\t// _MANAGER_CONTRACT_ADDRESS.createMilestoneApplication(address(this), _current_milestone_index);\r\n\t\trequire(\r\n\t\t\t_current_milestone_index < _MILESTONES.length,\r\n\t\t\t\"No more milestones to apply for\"\r\n\t\t);\r\n\t\t_MILESTONES[_current_milestone_index].status = MilestoneStatus.EVALUATING;\r\n\t\t_MILESTONES[_current_milestone_index].proofUrl = proofUrl;\r\n\t}\r\n\r\n\tfunction reviewMilestoneApplication(\r\n\t\tbool confirm\r\n\t) public onlyEvaluator onlyMilestoneStatus(MilestoneStatus.EVALUATING) {\r\n\t\tif (confirm) {\r\n\t\t\t_MILESTONES[_current_milestone_index].status = MilestoneStatus\r\n\t\t\t\t.COMPLETED;\r\n\t\t} else {\r\n\t\t\t_MILESTONES[_current_milestone_index].status = MilestoneStatus\r\n\t\t\t\t.PENDING;\r\n\t\t}\r\n\t}\r\n\r\n\t// Helper functions\r\n\r\n\tfunction showMilestoneStatus(\r\n\t\tMilestoneStatus status\r\n\t) public pure returns (string memory) {\r\n\t\tif (status == MilestoneStatus.PENDING) {\r\n\t\t\treturn \"pending\";\r\n\t\t} else if (status == MilestoneStatus.EVALUATING) {\r\n\t\t\treturn \"evaluating\";\r\n\t\t} else if (status == MilestoneStatus.COMPLETED) {\r\n\t\t\treturn \"completed\";\r\n\t\t}\r\n\r\n\t\treturn \"unknown\";\r\n\t}\r\n\r\n\tfunction showProjectStatus(\r\n\t\tProjectStatus status\r\n\t) public pure returns (string memory) {\r\n\t\tif (status == ProjectStatus.PENDING) {\r\n\t\t\treturn \"pending\";\r\n\t\t} else if (status == ProjectStatus.FUNDING) {\r\n\t\t\treturn \"funding\";\r\n\t\t} else if (status == ProjectStatus.ACTIVE) {\r\n\t\t\treturn \"active\";\r\n\t\t} else if (status == ProjectStatus.COMPLETED) {\r\n\t\t\treturn \"completed\";\r\n\t\t} else if (status == ProjectStatus.CANCELLED) {\r\n\t\t\treturn \"cancelled\";\r\n\t\t}\r\n\r\n\t\treturn \"unknown\";\r\n\t}\r\n\r\n\tfunction transferTokens(address to, uint256 amount) internal {\r\n\t\t// _TOKEN.safeTransfer(to, amount);\r\n\t}\r\n\r\n\tfunction transferTokensFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal {\r\n\t\t// _TOKEN.safeTransferFrom(from, to, amount);\r\n\t}\r\n\r\n\tfunction transferTokensToThisFrom(address from, uint256 amount) internal {\r\n\t\t// _TOKEN.safeTransferFrom(from, address(this), amount);\r\n\t}\r\n\r\n    function refundAll() internal {\r\n        // _TOKEN.safeTransfer(msg.sender, _funding_amounts[msg.sender]);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}